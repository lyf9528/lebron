// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	payinfoFieldNames          = builder.RawFieldNames(&Payinfo{})
	payinfoRows                = strings.Join(payinfoFieldNames, ",")
	payinfoRowsExpectAutoSet   = strings.Join(stringx.Remove(payinfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	payinfoRowsWithPlaceHolder = strings.Join(stringx.Remove(payinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	payinfoModel interface {
		Insert(ctx context.Context, data *Payinfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Payinfo, error)
		Update(ctx context.Context, data *Payinfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPayinfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Payinfo struct {
		Id             int64     `db:"id"`             // 支付信息表id
		Orderid        string    `db:"orderid"`        // 订单id
		Userid         int64     `db:"userid"`         // 用户id
		Payplatform    int64     `db:"payplatform"`    // 支付平台:1-支付宝,2-微信
		Platformnumber string    `db:"platformnumber"` // 支付流水号
		Platformstatus string    `db:"platformstatus"` // 支付状态
		CreateTime     time.Time `db:"create_time"`    // 创建时间
		UpdateTime     time.Time `db:"update_time"`    // 更新时间
	}
)

func newPayinfoModel(conn sqlx.SqlConn) *defaultPayinfoModel {
	return &defaultPayinfoModel{
		conn:  conn,
		table: "`payinfo`",
	}
}

func (m *defaultPayinfoModel) withSession(session sqlx.Session) *defaultPayinfoModel {
	return &defaultPayinfoModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`payinfo`",
	}
}

func (m *defaultPayinfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPayinfoModel) FindOne(ctx context.Context, id int64) (*Payinfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payinfoRows, m.table)
	var resp Payinfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayinfoModel) Insert(ctx context.Context, data *Payinfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, payinfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Orderid, data.Userid, data.Payplatform, data.Platformnumber, data.Platformstatus)
	return ret, err
}

func (m *defaultPayinfoModel) Update(ctx context.Context, data *Payinfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, payinfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Orderid, data.Userid, data.Payplatform, data.Platformnumber, data.Platformstatus, data.Id)
	return err
}

func (m *defaultPayinfoModel) tableName() string {
	return m.table
}
