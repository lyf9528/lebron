// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id string) error
	}

	defaultOrdersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Orders struct {
		Id          string    `db:"id"`           // 订单id
		Userid      int64     `db:"userid"`       // 用户id
		Shoppingid  int64     `db:"shoppingid"`   // 收货信息表id
		Payment     float64   `db:"payment"`      // 实际付款金额,单位是元,保留两位小数
		Paymenttype int64     `db:"paymenttype"`  // 支付类型,1-在线支付
		Postage     int64     `db:"postage"`      // 运费,单位是元
		Status      int64     `db:"status"`       // 订单状态:0-已取消-10-未付款，20-已付款，30-待发货 40-待收货，50-交易成功，60-交易关闭
		PaymentTime time.Time `db:"payment_time"` // 支付时间
		SendTime    time.Time `db:"send_time"`    // 发货时间
		EndTime     time.Time `db:"end_time"`     // 交易完成时间
		CloseTime   time.Time `db:"close_time"`   // 交易关闭时间
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newOrdersModel(conn sqlx.SqlConn) *defaultOrdersModel {
	return &defaultOrdersModel{
		conn:  conn,
		table: "`orders`",
	}
}

func (m *defaultOrdersModel) withSession(session sqlx.Session) *defaultOrdersModel {
	return &defaultOrdersModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id string) (*Orders, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
	var resp Orders
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Userid, data.Shoppingid, data.Payment, data.Paymenttype, data.Postage, data.Status, data.PaymentTime, data.SendTime, data.EndTime, data.CloseTime)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, data *Orders) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ordersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Shoppingid, data.Payment, data.Paymenttype, data.Postage, data.Status, data.PaymentTime, data.SendTime, data.EndTime, data.CloseTime, data.Id)
	return err
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
